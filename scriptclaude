# Complete Nintex Forms Export Script with Authentication
param(
    [string]$WebUrl = "https://sp.safalo.com/ConnorsWorkshop",
    [string]$ListName = "OnboardingList",
    [string]$OutputPath = "C:\Exports\NintexForms",
    [int]$StartID = 1,
    [int]$EndID = 10
)

Write-Host "=== Nintex Forms Export with Authentication ===" -ForegroundColor Green
Write-Host "Web: $WebUrl"
Write-Host "List: $ListName"
Write-Host "Output: $OutputPath"
Write-Host "ID Range: $StartID to $EndID"

# Create output directory
if (!(Test-Path $OutputPath)) {
    New-Item -ItemType Directory -Path $OutputPath -Force
    Write-Host "Created output directory: $OutputPath"
}

# Force credential popup to appear
Write-Host "`nAuthentication Required" -ForegroundColor Yellow
Write-Host "You will be prompted for your SAFALO domain credentials" -ForegroundColor White
Write-Host "Use format: SAFALO\yourusername" -ForegroundColor Gray

$Credentials = Get-Credential -Message "Enter SAFALO domain credentials (format: SAFALO\username)"

if (!$Credentials) {
    Write-Host "No credentials provided. Exiting." -ForegroundColor Red
    exit 1
}

Write-Host "Using credentials for: $($Credentials.UserName)" -ForegroundColor Green

# Test authentication first
Write-Host "`nTesting authentication..." -ForegroundColor Yellow
$testUrl = "$WebUrl/Lists/$ListName/AllItems.aspx"

try {
    $testResponse = Invoke-WebRequest -Uri $testUrl -Credential $Credentials -UseBasicParsing -TimeoutSec 15
    Write-Host "Authentication test: SUCCESS" -ForegroundColor Green
    Write-Host "Response size: $($testResponse.Content.Length) characters" -ForegroundColor Gray
}
catch {
    Write-Host "Authentication test: FAILED" -ForegroundColor Red
    Write-Host "Error: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "`nTroubleshooting tips:" -ForegroundColor Yellow
    Write-Host "1. Ensure username format is: SAFALO\username" -ForegroundColor White
    Write-Host "2. Verify your password is correct" -ForegroundColor White
    Write-Host "3. Check if you have access to SharePoint" -ForegroundColor White
    Write-Host "4. Try running PowerShell as administrator" -ForegroundColor White
    exit 1
}

# Define URL patterns to try
$urlPatterns = @(
    "$WebUrl/Lists/$ListName/DispForm.aspx?ID={0}",
    "https://sp.safalo.com/hr/Lists/$ListName/DispForm.aspx?ID={0}",
    "$WebUrl/Lists/$ListName/Item/displayifs.aspx?ID={0}",
    "https://sp.safalo.com/hr/Lists/$ListName/Item/displayifs.aspx?ID={0}"
)

# Test URL patterns with authentication
Write-Host "`nTesting form URL patterns..." -ForegroundColor Yellow
$workingPattern = $null

foreach ($pattern in $urlPatterns) {
    $testFormUrl = $pattern -f $StartID
    Write-Host "Testing: $testFormUrl" -ForegroundColor Gray
    
    try {
        $response = Invoke-WebRequest -Uri $testFormUrl -Credential $Credentials -UseBasicParsing -TimeoutSec 10
        
        if ($response.StatusCode -eq 200) {
            $contentLength = $response.Content.Length
            Write-Host "  SUCCESS - $contentLength characters" -ForegroundColor Green
            
            # Check if content looks like a form (not just SharePoint navigation)
            if ($response.Content -match "Nintex|form|Title.*Email|field.*value" -and $contentLength -gt 5000) {
                Write-Host "  Appears to contain form data!" -ForegroundColor Green
                $workingPattern = $pattern
                break
            } else {
                Write-Host "  Contains page content but may not be form data" -ForegroundColor Yellow
                if (!$workingPattern) { $workingPattern = $pattern }
            }
        }
    }
    catch {
        Write-Host "  FAILED - $($_.Exception.Message)" -ForegroundColor Red
    }
}

if (!$workingPattern) {
    Write-Host "`nNo working URL pattern found!" -ForegroundColor Red
    Write-Host "All form URL patterns failed authentication" -ForegroundColor Red
    exit 1
}

Write-Host "`nUsing URL pattern: $workingPattern" -ForegroundColor Green

# Find Chrome for PDF conversion
$chrome = ""
$chromePaths = @(
    "C:\Program Files\Google\Chrome\Application\chrome.exe",
    "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
)

foreach ($path in $chromePaths) {
    if (Test-Path $path) {
        $chrome = $path
        Write-Host "Found Chrome: $chrome" -ForegroundColor Green
        break
    }
}

if (!$chrome) {
    Write-Host "Chrome not found - will save HTML files only" -ForegroundColor Yellow
}

# Process each form
Write-Host "`nStarting form export..." -ForegroundColor Green
$successCount = 0
$failedCount = 0

for ($id = $StartID; $id -le $EndID; $id++) {
    $formUrl = $workingPattern -f $id
    $htmlFile = "$OutputPath\Form_ID$id.html"
    $pdfFile = "$OutputPath\NintexForm_ID$id.pdf"
    
    Write-Host "`nProcessing ID $id..." -ForegroundColor White
    Write-Host "  URL: $formUrl" -ForegroundColor Gray
    
    try {
        # Download form content with credentials
        $response = Invoke-WebRequest -Uri $formUrl -Credential $Credentials -UseBasicParsing -TimeoutSec 15
        
        if ($response.StatusCode -eq 200) {
            # Create enhanced HTML with form content
            $enhancedHtml = @"
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Nintex Form - ID $id</title>
    <style>
        body { 
            font-family: Segoe UI, Arial, sans-serif; 
            margin: 20px; 
            line-height: 1.6; 
            background: white; 
        }
        .form-header { 
            background: #0072C6; 
            color: white; 
            padding: 15px; 
            margin-bottom: 20px; 
            border-radius: 5px; 
        }
        .form-title { 
            font-size: 24px; 
            font-weight: bold; 
            margin-bottom: 5px; 
        }
        .form-subtitle { 
            font-size: 14px; 
            opacity: 0.9; 
        }
        .form-content { 
            background: white; 
            padding: 20px; 
            border-radius: 5px; 
            box-shadow: 0 2px 4px rgba(0,0,0,0.1); 
        }
        /* Hide SharePoint navigation */
        #s4-ribbonrow, #suiteBarTop, .ms-cui-ribbon, .ms-breadcrumb-top,
        .ms-webpart-chrome-title, #sideNavBox, #contentBox { 
            display: none !important; 
        }
        @media print { 
            body { margin: 0; }
            .form-header { 
                background: #0072C6 !important; 
                -webkit-print-color-adjust: exact; 
            }
        }
    </style>
</head>
<body>
    <div class="form-header">
        <div class="form-title">Nintex Form Export</div>
        <div class="form-subtitle">Form ID: $id | Exported: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</div>
    </div>
    <div class="form-content">
        $($response.Content)
    </div>
</body>
</html>
"@

            # Save HTML file
            [System.IO.File]::WriteAllText($htmlFile, $enhancedHtml, [System.Text.Encoding]::UTF8)
            Write-Host "  HTML saved: $([System.IO.Path]::GetFileName($htmlFile))" -ForegroundColor Green
            
            # Convert to PDF if Chrome is available
            if ($chrome) {
                $fileUri = "file:///$($htmlFile.Replace('\', '/'))"
                & $chrome --headless --disable-gpu --no-sandbox --print-to-pdf="$pdfFile" "$fileUri" 2>$null
                Start-Sleep -Seconds 3
                
                if (Test-Path $pdfFile) {
                    $pdfSize = (Get-Item $pdfFile).Length
                    Write-Host "  PDF created: $([System.IO.Path]::GetFileName($pdfFile)) ($pdfSize bytes)" -ForegroundColor Green
                    
                    # Remove HTML file if PDF was successful
                    Remove-Item $htmlFile -Force -ErrorAction SilentlyContinue
                    $successCount++
                } else {
                    Write-Host "  PDF conversion failed, keeping HTML" -ForegroundColor Yellow
                    $successCount++  # Count HTML as success
                }
            } else {
                Write-Host "  HTML file created (no Chrome for PDF)" -ForegroundColor Green
                $successCount++
            }
        } else {
            Write-Host "  FAILED - HTTP $($response.StatusCode)" -ForegroundColor Red
            $failedCount++
        }
    }
    catch {
        Write-Host "  FAILED - $($_.Exception.Message)" -ForegroundColor Red
        $failedCount++
        
        # Log failed URL
        "$formUrl" | Out-File -FilePath "$OutputPath\FailedURLs.txt" -Append
    }
    
    # Progress indicator
    $processed = ($id - $StartID + 1)
    $total = ($EndID - $StartID + 1)
    $percentComplete = [Math]::Round(($processed / $total) * 100, 1)
    Write-Progress -Activity "Exporting Forms" -Status "$processed of $total processed" -PercentComplete $percentComplete
    
    # Small delay to avoid overwhelming the server
    Start-Sleep -Seconds 1
}

Write-Progress -Activity "Exporting Forms" -Completed

# Final summary
Write-Host "`n=== EXPORT SUMMARY ===" -ForegroundColor Cyan
Write-Host "Total forms processed: $($successCount + $failedCount)" -ForegroundColor White
Write-Host "Successful exports: $successCount" -ForegroundColor Green
Write-Host "Failed exports: $failedCount" -ForegroundColor Red

if ($successCount + $failedCount -gt 0) {
    $successRate = [Math]::Round(($successCount / ($successCount + $failedCount)) * 100, 1)
    Write-Host "Success rate: $successRate%" -ForegroundColor White
}

Write-Host "Output directory: $OutputPath" -ForegroundColor Cyan

if ($failedCount -gt 0) {
    Write-Host "Failed URLs logged to: $OutputPath\FailedURLs.txt" -ForegroundColor Yellow
}

# Create export log
$logData = @{
    ExportDate = Get-Date
    WebUrl = $WebUrl
    ListName = $ListName
    IDRange = "$StartID-$EndID"
    SuccessfulExports = $successCount
    FailedExports = $failedCount
    OutputPath = $OutputPath
    URLPattern = $workingPattern
    AuthenticationUser = $Credentials.UserName
} | ConvertTo-Json -Depth 2

$logFile = "$OutputPath\ExportLog_$(Get-Date -Format 'yyyyMMdd_HHmmss').json"
$logData | Out-File -FilePath $logFile -Encoding UTF8

Write-Host "Export log saved: $logFile" -ForegroundColor Gray

Write-Host "`nExport completed!" -ForegroundColor Green

# Show next steps for scaling to 10,000 forms
if ($successCount -gt 0) {
    Write-Host "`n=== SCALING TO 10,000 FORMS ===" -ForegroundColor Yellow
    Write-Host "Since this test worked, you can now scale up:" -ForegroundColor White
    Write-Host "1. Increase the ID range: -StartID 1 -EndID 10000" -ForegroundColor White
    Write-Host "2. Process in batches: run multiple times with smaller ranges" -ForegroundColor White
    Write-Host "3. Expected time for 10,000: 2-4 hours" -ForegroundColor White
    Write-Host "4. Monitor disk space: ~50-100MB per 1,000 forms" -ForegroundColor White
}

Write-Host "`nDone!" -ForegroundColor Green
