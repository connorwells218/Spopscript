# Payload-Based PDF Export - Replicates Nintex's Print to PDF method exactly
param(
    [string]$WebUrl = "https://sp.safalo.com/ConnorsWorkshop",
    [string]$ListName = "OnboardingList",
    [string]$OutputPath = "C:\Exports\NintexForms",
    [int]$StartID = 1,
    [int]$EndID = 10
)

Write-Host "=== Payload-Based Nintex PDF Export ===" -ForegroundColor Green
Write-Host "Replicating the exact Print to PDF method"

# Get credentials
$Credentials = Get-Credential -Message "Enter SAFALO domain credentials (SAFALO\username)"

# Create output directory
if (!(Test-Path $OutputPath)) {
    New-Item -ItemType Directory -Path $OutputPath -Force
}

# The PrintToPdf endpoint
$printToPdfUrl = "$WebUrl/_layouts/15/NintexForms/PrintToPdf.aspx"
Write-Host "PDF Endpoint: $printToPdfUrl" -ForegroundColor Cyan

# Function to get the form HTML content (like Nintex does)
function Get-FormHtml {
    param(
        [string]$WebUrl,
        [string]$ListName,
        [int]$ItemID,
        [object]$Credentials
    )
    
    try {
        $formUrl = "$WebUrl/Lists/$ListName/DispForm.aspx?ID=$ItemID"
        Write-Host "  Getting form HTML from: $formUrl" -ForegroundColor Gray
        
        $response = Invoke-WebRequest -Uri $formUrl -Credential $Credentials -UseBasicParsing
        
        if ($response.StatusCode -eq 200) {
            # Extract the form HTML - look for the formFiller div or similar
            $content = $response.Content
            
            # Try to extract just the Nintex form content
            if ($content -match '<div[^>]*class="[^"]*nf-FormFiller[^"]*"[^>]*>(.*?)</div>(?=\s*</div>)') {
                $formHtml = $matches[1]
                Write-Host "  Extracted Nintex form HTML ($($formHtml.Length) chars)" -ForegroundColor Green
                return $formHtml
            }
            elseif ($content -match '<div[^>]*id="[^"]*formFiller[^"]*"[^>]*>(.*?)</div>') {
                $formHtml = $matches[1]
                Write-Host "  Extracted form HTML ($($formHtml.Length) chars)" -ForegroundColor Green
                return $formHtml
            }
            else {
                Write-Host "  Using full page content" -ForegroundColor Yellow
                return $content
            }
        }
        
        return $null
    }
    catch {
        Write-Host "  Error getting form HTML: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Function to call the Nintex PDF endpoint with the payload
function Invoke-NintexPdfGeneration {
    param(
        [string]$PdfEndpoint,
        [string]$FormHtml,
        [string]$SiteUrl,
        [string]$FormUrl,
        [int]$ItemID,
        [object]$Credentials,
        [string]$OutputFile
    )
    
    try {
        # Generate a form ID (similar to what Nintex does)
        $formId = "Nintex_PrintPdf_Form_" + [System.Guid]::NewGuid().ToString()
        
        # Create the payload similar to what you captured
        $payload = @{
            FormHtml = $FormHtml
            FormLayoutWidth = "900"
            FormLayoutHeight = "700" 
            FormUrl = "$FormUrl$ItemID"
            SiteUrl = $SiteUrl
            FormId = $formId
            FormDir = "ltr"
            FormInlineCss = "[]"
            FormCssUrls = "[]" 
            FormImages = "[]"
        } | ConvertTo-Json -Depth 10
        
        Write-Host "  Sending payload to PDF endpoint..." -ForegroundColor Gray
        Write-Host "  Payload size: $($payload.Length) characters" -ForegroundColor Gray
        
        # Make the POST request to the PDF endpoint
        $response = Invoke-WebRequest -Uri $PdfEndpoint -Method Post -Body $payload -ContentType "application/json" -Credential $Credentials -UseBasicParsing
        
        if ($response.StatusCode -eq 200) {
            # Check if response is PDF content
            $contentType = $response.Headers['Content-Type']
            if ($contentType -like "*pdf*" -or $response.Content[0..3] -join '' -match '%PDF') {
                Write-Host "  Received PDF response ($($response.Content.Length) bytes)" -ForegroundColor Green
                [System.IO.File]::WriteAllBytes($OutputFile, $response.Content)
                return $true
            }
            else {
                Write-Host "  Response not PDF format" -ForegroundColor Yellow
                Write-Host "  Content-Type: $contentType" -ForegroundColor Gray
                
                # Save response for debugging
                $debugFile = $OutputFile -replace '\.pdf$', '_debug.html'
                $response.Content | Out-File -FilePath $debugFile -Encoding UTF8
                Write-Host "  Debug response saved: $debugFile" -ForegroundColor Gray
                
                return $false
            }
        }
        
        return $false
    }
    catch {
        Write-Host "  PDF generation error: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Alternative method - try to call the endpoint differently
function Invoke-NintexPdfAlternative {
    param(
        [string]$WebUrl,
        [string]$ListName,
        [int]$ItemID,
        [object]$Credentials,
        [string]$OutputFile
    )
    
    try {
        # Try different PDF endpoint patterns
        $alternativeEndpoints = @(
            "$WebUrl/_layouts/15/NintexForms/PrintToPdf.aspx",
            "$WebUrl/_layouts/NintexForms/PrintToPdf.aspx",
            "$WebUrl/_vti_bin/NintexFormsServices/NfRestService.svc/GetFormPdf"
        )
        
        foreach ($endpoint in $alternativeEndpoints) {
            Write-Host "  Trying endpoint: $endpoint" -ForegroundColor Gray
            
            # Try with simple parameters
            $simplePayload = "listName=$ListName&itemId=$ItemID"
            
            try {
                $response = Invoke-WebRequest -Uri $endpoint -Method Post -Body $simplePayload -ContentType "application/x-www-form-urlencoded" -Credential $Credentials -UseBasicParsing -TimeoutSec 30
                
                if ($response.StatusCode -eq 200 -and $response.Content.Length -gt 1000) {
                    [System.IO.File]::WriteAllBytes($OutputFile, $response.Content)
                    Write-Host "  Alternative method worked!" -ForegroundColor Green
                    return $true
                }
            }
            catch {
                Write-Host "  Endpoint failed: $($_.Exception.Message)" -ForegroundColor Red
                continue
            }
        }
        
        return $false
    }
    catch {
        Write-Host "  Alternative method error: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Test with first form
Write-Host "`nTesting with ID $StartID..." -ForegroundColor Yellow

$testPdfFile = "$OutputPath\test_payload_ID$StartID.pdf"

# Step 1: Get the form HTML
$formHtml = Get-FormHtml -WebUrl $WebUrl -ListName $ListName -ItemID $StartID -Credentials $Credentials

if ($formHtml) {
    Write-Host "Successfully retrieved form HTML" -ForegroundColor Green
    
    # Step 2: Try to generate PDF using the payload method
    $siteUrl = "https://sp.safalo.com"
    $formUrl = "$WebUrl/Lists/$ListName/DispForm.aspx?ID="
    
    $success = Invoke-NintexPdfGeneration -PdfEndpoint $printToPdfUrl -FormHtml $formHtml -SiteUrl $siteUrl -FormUrl $formUrl -ItemID $StartID -Credentials $Credentials -OutputFile $testPdfFile
    
    if (!$success) {
        Write-Host "Payload method failed, trying alternative..." -ForegroundColor Yellow
        $success = Invoke-NintexPdfAlternative -WebUrl $WebUrl -ListName $ListName -ItemID $StartID -Credentials $Credentials -OutputFile $testPdfFile
    }
    
    if ($success) {
        $fileSize = (Get-Item $testPdfFile).Length
        Write-Host "SUCCESS! Test PDF created: $fileSize bytes" -ForegroundColor Green
        Write-Host "Test file: $testPdfFile" -ForegroundColor Cyan
        
        # If test worked, process all forms
        Write-Host "`nTest successful! Processing all forms..." -ForegroundColor Green
        
        $successCount = 0
        $failedCount = 0
        
        for ($id = $StartID; $id -le $EndID; $id++) {
            if ($id -eq $StartID) {
                # Already processed the first one
                $successCount++
                continue
            }
            
            $pdfFile = "$OutputPath\NintexForm_ID$id.pdf"
            Write-Host "`nProcessing ID $id..." -ForegroundColor White
            
            $itemFormHtml = Get-FormHtml -WebUrl $WebUrl -ListName $ListName -ItemID $id -Credentials $Credentials
            
            if ($itemFormHtml) {
                $itemSuccess = Invoke-NintexPdfGeneration -PdfEndpoint $printToPdfUrl -FormHtml $itemFormHtml -SiteUrl $siteUrl -FormUrl $formUrl -ItemID $id -Credentials $Credentials -OutputFile $pdfFile
                
                if (!$itemSuccess) {
                    $itemSuccess = Invoke-NintexPdfAlternative -WebUrl $WebUrl -ListName $ListName -ItemID $id -Credentials $Credentials -OutputFile $pdfFile
                }
                
                if ($itemSuccess) {
                    $fileSize = (Get-Item $pdfFile).Length
                    Write-Host "  SUCCESS - $fileSize bytes" -ForegroundColor Green
                    $successCount++
                } else {
                    Write-Host "  FAILED" -ForegroundColor Red
                    $failedCount++
                }
            } else {
                Write-Host "  FAILED - Could not get form HTML" -ForegroundColor Red
                $failedCount++
            }
            
            Start-Sleep -Seconds 1
        }
        
        # Summary
        Write-Host "`n=== EXPORT SUMMARY ===" -ForegroundColor Cyan
        Write-Host "Total processed: $($successCount + $failedCount)" -ForegroundColor White
        Write-Host "Successful: $successCount" -ForegroundColor Green
        Write-Host "Failed: $failedCount" -ForegroundColor Red
        
        if ($successCount -gt 0) {
            Write-Host "`n=== SCALING TO 10,000 FORMS ===" -ForegroundColor Yellow
            Write-Host "This method can be scaled up for bulk processing:" -ForegroundColor White
            Write-Host "1. Uses authentic Nintex PDF generation" -ForegroundColor White
            Write-Host "2. Direct API calls - much faster than browser automation" -ForegroundColor White
            Write-Host "3. Can handle large batches efficiently" -ForegroundColor White
        }
        
    } else {
        Write-Host "Both methods failed." -ForegroundColor Red
        Write-Host "The PDF endpoint may require additional parameters or authentication." -ForegroundColor Yellow
        
        Write-Host "`nTroubleshooting:" -ForegroundColor Yellow
        Write-Host "1. Check if there are additional headers needed" -ForegroundColor White
        Write-Host "2. Verify the exact endpoint URL from network tools" -ForegroundColor White
        Write-Host "3. Look for any form validation tokens or session IDs" -ForegroundColor White
    }
} else {
    Write-Host "Could not retrieve form HTML. Check authentication and URL." -ForegroundColor Red
}

Write-Host "`nPayload-based export completed!" -ForegroundColor Green
