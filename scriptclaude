# Alternative Authentication Methods for SharePoint Forms Export

param(
    [string]$TestUrl = "https://sp.safalo.com/ConnorsWorkshop/Lists/OnboardingList/DispForm.aspx?ID=2"
)

Write-Host "Testing Alternative Authentication Methods" -ForegroundColor Green

# Method 1: Internet Explorer with integrated Windows auth
function Test-InternetExplorer {
    Write-Host "`nMethod 1: Using Internet Explorer COM object..." -ForegroundColor Yellow
    
    try {
        $ie = New-Object -ComObject InternetExplorer.Application
        $ie.Visible = $false
        $ie.Silent = $true
        
        Write-Host "Navigating to: $TestUrl"
        $ie.Navigate($TestUrl)
        
        # Wait for page to load
        while ($ie.Busy -or $ie.ReadyState -ne 4) {
            Start-Sleep -Seconds 1
        }
        
        $content = $ie.Document.documentElement.innerHTML
        $ie.Quit()
        
        if ($content -and $content.Length -gt 1000) {
            Write-Host "SUCCESS - IE method works! Content length: $($content.Length)" -ForegroundColor Green
            return $content
        } else {
            Write-Host "FAILED - No content retrieved" -ForegroundColor Red
            return $null
        }
    }
    catch {
        Write-Host "FAILED - IE error: $($_.Exception.Message)" -ForegroundColor Red
        if ($ie) { $ie.Quit() }
        return $null
    }
}

# Method 2: Direct browser automation
function Test-DirectBrowser {
    Write-Host "`nMethod 2: Direct browser with credentials..." -ForegroundColor Yellow
    
    try {
        # Create a temporary batch file that opens browser with URL
        $batchFile = "$env:TEMP\open_form.bat"
        $batchContent = @"
@echo off
start "" "$TestUrl"
"@
        $batchContent | Out-File -FilePath $batchFile -Encoding ASCII
        
        Write-Host "Opening browser automatically..."
        Start-Process -FilePath $batchFile -Wait
        
        Write-Host "Manual step required:" -ForegroundColor Yellow
        Write-Host "1. Browser should have opened with the form" -ForegroundColor White
        Write-Host "2. Login if prompted" -ForegroundColor White
        Write-Host "3. Verify you can see the Nintex form" -ForegroundColor White
        
        Remove-Item $batchFile -Force -ErrorAction SilentlyContinue
        
        $response = Read-Host "Can you see the Nintex form in your browser? (y/n)"
        return $response -eq "y"
    }
    catch {
        Write-Host "FAILED - Browser test error: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Method 3: WebClient with Windows authentication
function Test-WebClient {
    Write-Host "`nMethod 3: WebClient with Windows credentials..." -ForegroundColor Yellow
    
    try {
        $webClient = New-Object System.Net.WebClient
        $webClient.UseDefaultCredentials = $true
        $webClient.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
        
        $content = $webClient.DownloadString($TestUrl)
        $webClient.Dispose()
        
        if ($content -and $content.Length -gt 1000) {
            Write-Host "SUCCESS - WebClient works! Content length: $($content.Length)" -ForegroundColor Green
            return $content
        } else {
            Write-Host "FAILED - No content retrieved" -ForegroundColor Red
            return $null
        }
    }
    catch {
        Write-Host "FAILED - WebClient error: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Method 4: PowerShell with explicit Windows authentication
function Test-ExplicitWindowsAuth {
    Write-Host "`nMethod 4: Explicit Windows authentication..." -ForegroundColor Yellow
    
    try {
        # Get current user context
        $currentUser = [System.Security.Principal.WindowsIdentity]::GetCurrent()
        Write-Host "Current user: $($currentUser.Name)"
        
        # Create network credential from current Windows user
        $credential = [System.Net.CredentialCache]::DefaultNetworkCredentials
        
        $request = [System.Net.WebRequest]::Create($TestUrl)
        $request.Credentials = $credential
        $request.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
        
        $response = $request.GetResponse()
        $stream = $response.GetResponseStream()
        $reader = New-Object System.IO.StreamReader($stream)
        $content = $reader.ReadToEnd()
        $reader.Close()
        $stream.Close()
        $response.Close()
        
        if ($content -and $content.Length -gt 1000) {
            Write-Host "SUCCESS - Explicit auth works! Content length: $($content.Length)" -ForegroundColor Green
            return $content
        } else {
            Write-Host "FAILED - No content retrieved" -ForegroundColor Red
            return $null
        }
    }
    catch {
        Write-Host "FAILED - Explicit auth error: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Method 5: Manual browser with file save
function Test-ManualBrowserSave {
    Write-Host "`nMethod 5: Manual browser save method..." -ForegroundColor Yellow
    
    Write-Host "This method requires manual steps:" -ForegroundColor Cyan
    Write-Host "1. Open your browser manually" -ForegroundColor White
    Write-Host "2. Navigate to: $TestUrl" -ForegroundColor White
    Write-Host "3. Login with your SAFALO credentials" -ForegroundColor White
    Write-Host "4. Right-click on the page -> Save As -> Complete HTML" -ForegroundColor White
    Write-Host "5. Save to: C:\temp\manual_form.html" -ForegroundColor White
    
    Read-Host "Press Enter when you've completed the manual save"
    
    $savedFile = "C:\temp\manual_form.html"
    if (Test-Path $savedFile) {
        $content = Get-Content $savedFile -Raw
        Write-Host "SUCCESS - Manual save worked! File size: $((Get-Item $savedFile).Length) bytes" -ForegroundColor Green
        return $content
    } else {
        Write-Host "FAILED - Manual save file not found" -ForegroundColor Red
        return $null
    }
}

# Test each method
Write-Host "Testing authentication methods for: $TestUrl" -ForegroundColor Cyan

$workingContent = $null
$workingMethod = $null

# Test Method 1: Internet Explorer
$content1 = Test-InternetExplorer
if ($content1) { $workingContent = $content1; $workingMethod = "Internet Explorer" }

# Test Method 2: Direct Browser (if IE failed)
if (!$workingContent) {
    $browserWorked = Test-DirectBrowser
    if ($browserWorked) { $workingMethod = "Direct Browser" }
}

# Test Method 3: WebClient (if IE failed)
if (!$workingContent) {
    $content3 = Test-WebClient  
    if ($content3) { $workingContent = $content3; $workingMethod = "WebClient" }
}

# Test Method 4: Explicit Windows Auth (if WebClient failed)
if (!$workingContent) {
    $content4 = Test-ExplicitWindowsAuth
    if ($content4) { $workingContent = $content4; $workingMethod = "Explicit Windows Auth" }
}

# Test Method 5: Manual save (if all automated methods failed)
if (!$workingContent) {
    $content5 = Test-ManualBrowserSave
    if ($content5) { $workingContent = $content5; $workingMethod = "Manual Browser Save" }
}

# Results
Write-Host "`n=== AUTHENTICATION TEST RESULTS ===" -ForegroundColor Cyan

if ($workingContent) {
    Write-Host "SUCCESS: $workingMethod works!" -ForegroundColor Green
    Write-Host "Content length: $($workingContent.Length) characters" -ForegroundColor White
    
    # Check if it's actual form content
    if ($workingContent -match "Nintex" -or $workingContent -match "form" -or $workingContent -match "Title.*Email") {
        Write-Host "Content appears to be a form!" -ForegroundColor Green
    } else {
        Write-Host "Content might be SharePoint navigation, not form data" -ForegroundColor Yellow
    }
    
    # Save test content
    $testFile = "C:\temp\test_auth_content.html"
    if (!(Test-Path "C:\temp")) { New-Item -ItemType Directory -Path "C:\temp" -Force }
    $workingContent | Out-File -FilePath $testFile -Encoding UTF8
    Write-Host "Test content saved to: $testFile" -ForegroundColor Cyan
    
    Write-Host "`nNext steps:" -ForegroundColor Yellow
    Write-Host "1. Check the saved HTML file to verify it contains form data" -ForegroundColor White
    Write-Host "2. If it looks good, we can build a bulk export using the $workingMethod method" -ForegroundColor White
} else {
    Write-Host "FAILED: All authentication methods failed" -ForegroundColor Red
    Write-Host "`nPossible solutions:" -ForegroundColor Yellow
    Write-Host "1. Run PowerShell as SAFALO domain administrator" -ForegroundColor White
    Write-Host "2. Check if you're on the SAFALO domain network" -ForegroundColor White
    Write-Host "3. Verify the URL is correct by testing in browser first" -ForegroundColor White
    Write-Host "4. Contact IT about SharePoint authentication settings" -ForegroundColor White
}

Write-Host "`nAuthentication test completed!" -ForegroundColor Green
