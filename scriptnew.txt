# Windows Authentication Solution for SharePoint
# Handles domain authentication properly

param(
    [string]$WebUrl = "https://sp.safalo.com/ConnorsWorkshop",
    [string]$ListName = "OnboardingList",
    [string]$OutputPath = "C:\Exports\NintexForms",
    [int]$StartID = 1,
    [int]$EndID = 10
)

Write-Host "Windows Authentication Solution" -ForegroundColor Green
Write-Host "Domain: SAFALO" -ForegroundColor Gray
Write-Host "Web: $WebUrl"
Write-Host "List: $ListName"

# Create output directory
if (!(Test-Path $OutputPath)) {
    New-Item -ItemType Directory -Path $OutputPath -Force
}

# Method 1: Use current Windows credentials (if running as domain user)
function Test-CurrentCredentials {
    param([string]$TestUrl)
    
    try {
        Write-Host "Testing with current Windows credentials..." -ForegroundColor Yellow
        $response = Invoke-WebRequest -Uri $TestUrl -UseDefaultCredentials -UseBasicParsing -TimeoutSec 10
        Write-Host "Current credentials work!" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "Current credentials failed: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Method 2: Use explicit domain credentials
function Test-DomainCredentials {
    param([string]$TestUrl)
    
    try {
        Write-Host "Enter your SAFALO domain credentials" -ForegroundColor Yellow
        Write-Host "Format: SAFALO\username or username@safalo.com" -ForegroundColor Gray
        
        $credential = Get-Credential -Message "Enter SAFALO domain credentials (SAFALO\username)"
        
        $response = Invoke-WebRequest -Uri $TestUrl -Credential $credential -UseBasicParsing -TimeoutSec 10
        Write-Host "Domain credentials work!" -ForegroundColor Green
        return $credential
    }
    catch {
        Write-Host "Domain credentials failed: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Method 3: Use Windows integrated authentication with specific user
function Invoke-AsUser {
    param(
        [string]$Username,
        [string]$Password,
        [string]$Domain = "SAFALO",
        [scriptblock]$ScriptBlock
    )
    
    try {
        $securePassword = ConvertTo-SecureString $Password -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential("$Domain\$Username", $securePassword)
        
        # This approach starts a new process with the specified credentials
        $job = Start-Job -ScriptBlock $ScriptBlock -Credential $credential
        $result = Receive-Job -Job $job -Wait
        Remove-Job -Job $job
        
        return $result
    }
    catch {
        Write-Host "User impersonation failed: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Method 4: Download content with proper Windows auth
function Get-FormContent {
    param([string]$FormUrl, [object]$Credentials = $null)
    
    try {
        if ($Credentials) {
            $response = Invoke-WebRequest -Uri $FormUrl -Credential $Credentials -UseBasicParsing
        } else {
            $response = Invoke-WebRequest -Uri $FormUrl -UseDefaultCredentials -UseBasicParsing
        }
        
        return $response.Content
    }
    catch {
        Write-Host "Failed to get form content: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Test authentication methods
Write-Host "`nTesting authentication methods..." -ForegroundColor Cyan
$testUrl = $WebUrl

$workingCredentials = $null

# Try current Windows credentials first
if (Test-CurrentCredentials -TestUrl $testUrl) {
    $workingCredentials = "current"
    Write-Host "Will use current Windows credentials" -ForegroundColor Green
} else {
    # Try domain credentials
    $domainCreds = Test-DomainCredentials -TestUrl $testUrl
    if ($domainCreds) {
        $workingCredentials = $domainCreds
        Write-Host "Will use provided domain credentials" -ForegroundColor Green
    } else {
        Write-Host "Authentication failed with both methods" -ForegroundColor Red
        Write-Host "`nPossible solutions:" -ForegroundColor Yellow
        Write-Host "1. Run PowerShell as administrator" -ForegroundColor White
        Write-Host "2. Run as a user with SharePoint access (runas /user:SAFALO\username powershell)" -ForegroundColor White
        Write-Host "3. Add your computer to the SAFALO domain" -ForegroundColor White
        Write-Host "4. Use VPN if this is an internal site" -ForegroundColor White
        exit 1
    }
}

# Process forms
$successCount = 0
$failedCount = 0

Write-Host "`nStarting form export..." -ForegroundColor Green

for ($id = $StartID; $id -le $EndID; $id++) {
    $formUrl = "$WebUrl/Lists/$ListName/DispForm.aspx?ID=$id"
    $pdfFile = "$OutputPath\NintexForm_ID$id.pdf"
    
    Write-Host "`nProcessing ID $id..." -ForegroundColor White
    Write-Host "URL: $formUrl" -ForegroundColor Gray
    
    # Get form content
    if ($workingCredentials -eq "current") {
        $htmlContent = Get-FormContent -FormUrl $formUrl
    } else {
        $htmlContent = Get-FormContent -FormUrl $formUrl -Credentials $workingCredentials
    }
    
    if ($htmlContent) {
        # Save to temp HTML file
        $tempHtml = "$env:TEMP\form_$id.html"
        $htmlContent | Out-File -FilePath $tempHtml -Encoding UTF8
        
        # Convert to PDF using Chrome (no auth needed for local files)
        $chrome = "C:\Program Files\Google\Chrome\Application\chrome.exe"
        if (Test-Path $chrome) {
            $fileUri = "file:///$($tempHtml.Replace('\', '/'))"
            & $chrome --headless --disable-gpu --no-sandbox --print-to-pdf="$pdfFile" "$fileUri" 2>$null
            Start-Sleep -Seconds 3
        }
        
        # Cleanup temp file
        Remove-Item $tempHtml -Force -ErrorAction SilentlyContinue
        
        if (Test-Path $pdfFile) {
            $fileSize = (Get-Item $pdfFile).Length
            Write-Host "SUCCESS - $fileSize bytes" -ForegroundColor Green
            $successCount++
        } else {
            Write-Host "FAILED - PDF conversion failed" -ForegroundColor Red
            $failedCount++
        }
    } else {
        Write-Host "FAILED - Could not download form" -ForegroundColor Red
        $failedCount++
    }
    
    Start-Sleep -Seconds 1
}

# Summary
Write-Host "`n=== RESULTS ===" -ForegroundColor Cyan
Write-Host "Successful: $successCount" -ForegroundColor Green
Write-Host "Failed: $failedCount" -ForegroundColor Red
Write-Host "Output: $OutputPath" -ForegroundColor Cyan

Write-Host "`nDone!" -ForegroundColor Green
