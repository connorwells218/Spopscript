<#
Export Nintex DispForm.aspx pages to PDF via Edge (Chromium) + Selenium 4 + DevTools.

Run:
  powershell -NoProfile -ExecutionPolicy Bypass -File .\ExportForms.ps1
  # or customize:
  .\ExportForms.ps1 -StartID 1 -EndID 50 -OutputPath 'C:\Exports\NintexForms' -ShowBrowser
Prereqs:
  - Edge installed (v109 in your case)
  - EdgeDriver matches Edge (msedgedriver.exe)
  - Place msedgedriver.exe at C:\Users\administrator.SAFALO\Desktop\Script\msedgedriver.exe
  - Script can download Selenium DLLs OR you provide them in .\bin (see -Offline)
#>

param(
  [string]$WebUrl     = "https://sp.safalo.com/ConnorsWorkshop",
  [string]$ListName   = "OnboardingList",
  [int]   $StartID    = 1,
  [int]   $EndID      = 10,
  [string]$OutputPath = "C:\Exports\NintexForms",
  [switch]$Offline,         # if set, don't download Selenium DLLs; expect them in .\bin
  [switch]$ShowBrowser      # if set, runs with a visible Edge; otherwise headless
)

# ---------- utilities ----------
# robust script root (works in ISE and console)
$ScriptRoot =
    if ($PSScriptRoot) { $PSScriptRoot }
    elseif ($PSCommandPath) { Split-Path -Parent $PSCommandPath }
    else { (Get-Location).Path }

function Ensure-Folder([string]$p) {
  if (-not [string]::IsNullOrWhiteSpace($p) -and -not (Test-Path $p)) {
    New-Item -ItemType Directory -Path $p -Force | Out-Null
  }
}

# Older Windows may default to weaker TLS; force TLS 1.2 for NuGet
try { [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 } catch {}

function Ensure-SeleniumAssemblies {
  $bin = Join-Path $ScriptRoot "bin"
  Ensure-Folder $bin

  $wd  = Join-Path $bin "WebDriver.dll"
  $sup = Join-Path $bin "WebDriver.Support.dll"

  if (-not (Test-Path $wd -PathType Leaf) -or -not (Test-Path $sup -PathType Leaf)) {
    if ($Offline) { throw "Selenium DLLs not found in `"$bin`" and -Offline was specified." }

    Write-Host "Downloading Selenium assemblies to $bin ..." -ForegroundColor Yellow
    Add-Type -AssemblyName System.IO.Compression.FileSystem

    $packages = @{
      "selenium.webdriver.4.22.0.nupkg" = "https://globalcdn.nuget.org/packages/selenium.webdriver.4.22.0.nupkg"
      "selenium.support.4.22.0.nupkg"   = "https://globalcdn.nuget.org/packages/selenium.support.4.22.0.nupkg"
    }

    foreach ($kv in $packages.GetEnumerator()) {
      $nupkgPath = Join-Path $bin $kv.Key
      if (-not (Test-Path $nupkgPath)) {
        Invoke-WebRequest -Uri $kv.Value -OutFile $nupkgPath
      }
      $zip = [IO.Compression.ZipFile]::OpenRead($nupkgPath)
      foreach ($entry in $zip.Entries) {
        if ($entry.FullName -like "lib/net48/*.dll") {
          $out = Join-Path $bin ([IO.Path]::GetFileName($entry.FullName))
          $fs = [IO.File]::Open($out, [IO.FileMode]::Create)
          $entry.Open().CopyTo($fs)
          $fs.Dispose()
        }
      }
      $zip.Dispose()
    }
  }

  Add-Type -Path $wd -ErrorAction Stop
  Add-Type -Path $sup -ErrorAction Stop
}

function Wait-ForNintexRender($driver, [int]$timeoutSec = 45) {
  try {
    $wait = New-Object OpenQA.Selenium.Support.UI.WebDriverWait($driver, [TimeSpan]::FromSeconds($timeoutSec))
    $null = $wait.Until({
      param($d)
      try {
        $ready = $d.ExecuteScript("return document.readyState") -eq "complete"
        $els = $d.FindElements([OpenQA.Selenium.By]::CssSelector("div.nf-form,div#formFiller,div.ms-formtable"))
        return ($ready -and $els.Count -gt 0)
      } catch { $false }
    })
    return $true
  } catch { return $false }
}

function Save-PdfFromDevTools($driver, [string]$path) {
  $args = @{
    "printBackground"   = $true
    "landscape"         = $false
    "scale"             = 1.0
    "marginTop"         = 0.4
    "marginBottom"      = 0.4
    "marginLeft"        = 0.4
    "marginRight"       = 0.4
    "preferCSSPageSize" = $true
    "paperWidth"        = 8.5
    "paperHeight"       = 11.0
  }
  $resp = $driver.ExecuteCdpCommand("Page.printToPDF", $args)
  [IO.File]::WriteAllBytes($path, [Convert]::FromBase64String($resp["data"])) | Out-Null
}
# ---------- /utilities ----------

Write-Host "Edge + Selenium + DevTools PDF export" -ForegroundColor Cyan
Write-Host "Site : $WebUrl"  -ForegroundColor Gray
Write-Host "List : $ListName  IDs: $StartID..$EndID" -ForegroundColor Gray

Ensure-Folder $OutputPath
Ensure-SeleniumAssemblies

# Path to EdgeDriver (update if you move it)
$driverPath = 'C:\Users\administrator.SAFALO\Desktop\Script\msedgedriver.exe'
if (-not (Test-Path $driverPath -PathType Leaf)) {
  throw "msedgedriver.exe not found at: $driverPath"
}
$driverDir  = Split-Path $driverPath -Parent
$driverName = Split-Path $driverPath -Leaf

# Start EdgeDriver service explicitly
$edgeSvc = [OpenQA.Selenium.Edge.EdgeDriverService]::CreateDefaultService($driverDir, $driverName)
$edgeSvc.HideCommandPromptWindow = $true

# Build Edge options (Selenium 4: no UseChromium property)
# Create via the loaded assembly to avoid type-resolution issues on some servers
$wdDll = Join-Path $ScriptRoot 'bin\WebDriver.dll'
$asm   = [System.Reflection.Assembly]::LoadFrom($wdDll)

$edgeOptionsType = $asm.GetType('OpenQA.Selenium.Edge.EdgeOptions')
if (-not $edgeOptionsType) { throw "EdgeOptions type not found in WebDriver.dll." }
$opts = [System.Activator]::CreateInstance($edgeOptionsType)

$host = ([Uri]$WebUrl).Host
$null = $opts.AddArgument("--auth-server-allowlist=$host")
$null = $opts.AddArgument("--auth-negotiate-delegate-whitelist=$host")
$null = $opts.AddArgument("--disable-features=BlockInsecurePrivateNetworkRequests")
if (-not $ShowBrowser) { $null = $opts.AddArgument("--headless=new"); $null = $opts.AddArgument("--disable-gpu") }

# Create EdgeDriver via assembly to guarantee constructor resolution
$edgeDriverType = $asm.GetType('OpenQA.Selenium.Edge.EdgeDriver')
if (-not $edgeDriverType) { throw "EdgeDriver type not found in WebDriver.dll." }

$driver = [System.Activator]::CreateInstance($edgeDriverType, @($edgeSvc, $opts))
$null = $driver.Manage().Timeouts().PageLoad = [TimeSpan]::FromSeconds(180)

$ok = 0; $bad = 0

try {
  for ($id = $StartID; $id -le $EndID; $id++) {
    $url = "$WebUrl/Lists/$ListName/DispForm.aspx?ID=$id"
    $out = Join-Path $OutputPath ("NintexForm_ID{0}.pdf" -f $id)
    Write-Host "ID $id → $url" -ForegroundColor White
    try {
      $driver.Navigate().GoToUrl($url) | Out-Null

      if (-not (Wait-ForNintexRender $driver 60)) {
        Write-Host "  (Warning) Form may not be fully rendered; proceeding..." -ForegroundColor Yellow
      }

      Save-PdfFromDevTools -driver $driver -path $out

      if (Test-Path $out) {
        $bytes = (Get-Item $out).Length
        Write-Host ("  Saved {0:N0} bytes → {1}" -f $bytes, $out) -ForegroundColor Green
        $ok++
      } else {
        throw "No file produced."
      }
    }
    catch {
      Write-Host ("  FAILED: {0}" -f $_.Exception.Message) -ForegroundColor Red
      $bad++
    }
    Start-Sleep -Milliseconds 300
  }
}
finally {
  if ($driver) { $driver.Quit() }
}

Write-Host "`n=== RESULTS ===" -ForegroundColor Cyan
Write-Host ("Successful: {0}" -f $ok) -ForegroundColor Green
Write-Host ("Failed    : {0}" -f $bad) -ForegroundColor Red
Write-Host ("Output    : {0}" -f $OutputPath) -ForegroundColor Gray
