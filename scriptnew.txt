<#
Exports SharePoint 2016 (on-prem) Nintex Display Forms to PDF
- Auth: Windows Integrated (IWA) via Edge Chromium flags
- Render: Real live page (no HTML saving)
- PDF: DevTools Page.printToPDF (no dialogs)

First run auto-downloads Selenium assemblies into a local ".\bin" folder.
Place msedgedriver.exe next to this script or ensure it's on PATH.
#>

param(
  [string]$WebUrl     = "https://sp.safalo.com/ConnorsWorkshop",
  [string]$ListName   = "OnboardingList",
  [int]   $StartID    = 1,
  [int]   $EndID      = 10,
  [string]$OutputPath = "C:\Exports\NintexForms"
)

# -------------------- helpers --------------------
function Ensure-Folder([string]$p) {
  if (-not (Test-Path $p)) { New-Item -ItemType Directory -Path $p -Force | Out-Null }
}

function Get-ScriptDir {
  Split-Path -Parent $MyInvocation.MyCommand.Path
}

function Ensure-SeleniumAssemblies {
  $root = Get-ScriptDir
  $bin  = Join-Path $root "bin"
  Ensure-Folder $bin

  $need = @(
    "Selenium.WebDriver/4.22.0/lib/net48/WebDriver.dll",
    "Selenium.Support/4.22.0/lib/net48/WebDriver.Support.dll"
  )

  $dlBase = "https://globalcdn.nuget.org/packages"

  $pkgs = @{
    "Selenium.WebDriver.4.22.0.nupkg" = "selenium.webdriver.4.22.0.nupkg"
    "Selenium.Support.4.22.0.nupkg"   = "selenium.support.4.22.0.nupkg"
  }

  $allPresent = $true
  foreach ($rel in $need) {
    if (-not (Test-Path (Join-Path $bin (Split-Path $rel -Leaf)))) { $allPresent = $false }
  }

  if (-not $allPresent) {
    Write-Host "Downloading Selenium assemblies..." -ForegroundColor Yellow
    foreach ($kv in $pkgs.GetEnumerator()) {
      $url  = "$dlBase/$($kv.Key)"
      $dest = Join-Path $bin $kv.Value
      if (-not (Test-Path $dest)) {
        Invoke-WebRequest -Uri $url -OutFile $dest
      }
      # Extract just the DLLs we need
      $zip = [IO.Compression.ZipFile]::OpenRead($dest)
      foreach ($entry in $zip.Entries) {
        if ($entry.FullName -like "lib/net48/*.dll") {
          $out = Join-Path $bin ([IO.Path]::GetFileName($entry.FullName))
          $fs = [IO.File]::Open($out, [IO.FileMode]::Create)
          $entry.Open().CopyTo($fs)
          $fs.Dispose()
        }
      }
      $zip.Dispose()
    }
  }

  # Load assemblies
  Add-Type -Path (Join-Path $bin "WebDriver.dll")        -ErrorAction Stop
  Add-Type -Path (Join-Path $bin "WebDriver.Support.dll") -ErrorAction Stop
}

function Test-EdgeDriver {
  if (-not (Get-Command msedgedriver.exe -ErrorAction SilentlyContinue)) {
    $expect = Join-Path (Get-ScriptDir) "msedgedriver.exe"
    if (-not (Test-Path $expect)) {
      throw "msedgedriver.exe not found. Put it next to this script or add to PATH."
    }
  }
}

function Wait-ForNintexRender($driver, [int]$timeoutSec = 45) {
  # requires Selenium.Support
  $global:err = $null
  try {
    $wait = New-Object OpenQA.Selenium.Support.UI.WebDriverWait($driver, [TimeSpan]::FromSeconds($timeoutSec))
    $null = $wait.Until({
      param($d)
      try {
        # Check that document.readyState is complete
        $ready = $d.ExecuteScript("return document.readyState") -eq "complete"

        # Look for Nintex markup/containers commonly present in SP2016 forms
        $hasNintex = $false
        $selectors = @(
          "div.nf-form",                   # common Nintex form container
          "div[id^='formFiller']",        # classic filler
          "div#formFiller",               # fallback id
          "div.NF-Form",                  # older casing
          "div.ms-formtable"              # SP form container (as a fallback)
        )
        foreach ($sel in $selectors) {
          $els = $d.FindElements([OpenQA.Selenium.By]::CssSelector($sel))
          if ($els.Count -gt 0) { $hasNintex = $true; break }
        }
        return ($ready -and $hasNintex)
      } catch { $false }
    })
    return $true
  } catch {
    return $false
  }
}

function Save-PdfFromDevTools($driver, [string]$path) {
  # Edge Chromium supports Chrome DevTools Protocol via ExecuteCdpCommand
  $args = @{
    "printBackground" = $true
    "landscape"       = $false
    "scale"           = 1.0
    "marginTop"       = 0.4
    "marginBottom"    = 0.4
    "marginLeft"      = 0.4
    "marginRight"     = 0.4
    "preferCSSPageSize" = $true
  }
  $resp = $driver.ExecuteCdpCommand("Page.printToPDF", $args)
  $b64  = $resp["data"]
  [IO.File]::WriteAllBytes($path, [Convert]::FromBase64String($b64)) | Out-Null
}
# -------------------- /helpers --------------------

Write-Host "Edge + Selenium + DevTools PDF export" -ForegroundColor Cyan
Write-Host "Site : $WebUrl"  -ForegroundColor Gray
Write-Host "List : $ListName  IDs: $StartID..$EndID" -ForegroundColor Gray

Ensure-Folder $OutputPath
Ensure-SeleniumAssemblies
Test-EdgeDriver

# Build Edge options
$edgeSvcType   = [OpenQA.Selenium.Edge.EdgeDriverService]
$edgeOptType   = [OpenQA.Selenium.Edge.EdgeOptions]
$edgeSvc       = $edgeSvcType]::CreateDefault()
$edgeSvc.HideCommandPromptWindow = $true

$opts = New-Object $edgeOptType
$opts.UseChromium = $true

# Important for IWA (NTLM/Kerberos) on intranet sites:
$host = ([Uri]$WebUrl).Host
$opts.AddArgument("--auth-server-allowlist=$host")
$opts.AddArgument("--auth-negotiate-delegate-whitelist=$host")
$opts.AddArgument("--disable-features=BlockInsecurePrivateNetworkRequests")
$opts.AddArgument("--start-maximized")

# Headless is fine if IWA works in your environment; if not, remove this line.
$opts.AddArgument("--headless=new")
$opts.AddArgument("--disable-gpu")

# Start Edge
$driver = New-Object OpenQA.Selenium.Edge.EdgeDriver($edgeSvc, $opts)
$driver.Manage().Timeouts().PageLoad = [TimeSpan]::FromSeconds(180)

$ok = 0; $bad = 0

try {
  for ($id = $StartID; $id -le $EndID; $id++) {
    $url = "$WebUrl/Lists/$ListName/DispForm.aspx?ID=$id"
    $out = Join-Path $OutputPath ("NintexForm_ID{0}.pdf" -f $id)
    Write-Host "ID $id → $url" -ForegroundColor White
    try {
      $driver.Navigate().GoToUrl($url) | Out-Null

      # Wait until the Nintex form is actually on the page
      if (-not (Wait-ForNintexRender $driver 60)) {
        Write-Host "  (Warning) Form may not be fully rendered; proceeding..." -ForegroundColor Yellow
      }

      # Ensure DevTools Page domain is initialized (navigate already does this)
      # Print to PDF (base64) and save
      Save-PdfFromDevTools -driver $driver -path $out

      if (Test-Path $out) {
        $bytes = (Get-Item $out).Length
        Write-Host ("  Saved {0:N0} bytes → {1}" -f $bytes, $out) -ForegroundColor Green
        $ok++
      } else {
        throw "No file produced."
      }
    }
    catch {
      Write-Host ("  FAILED: {0}" -f $_.Exception.Message) -ForegroundColor Red
      $bad++
    }
    Start-Sleep -Milliseconds 300
  }
}
finally {
  $driver.Quit()
}

Write-Host "`n=== RESULTS ===" -ForegroundColor Cyan
Write-Host ("Successful: {0}" -f $ok) -ForegroundColor Green
Write-Host ("Failed    : {0}" -f $bad) -ForegroundColor Red
Write-Host ("Output    : {0}" -f $OutputPath) -ForegroundColor Gray
